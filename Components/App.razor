<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />

    <link rel="icon" href="images/app-icon.png" />

    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["Diyokee-server.styles.css"]" />

    <script src='_content/Blazor.Extensions.Canvas/blazor.extensions.canvas.js'></script>

    <link href="/fonts/fa-free-6.7.2-web/css/fontawesome.min.css" rel="stylesheet" />
    <link href="/fonts/fa-free-6.7.2-web/css/solid.min.css" rel="stylesheet" />
    <link href="/fonts/fa-free-6.7.2-web/css/regular.min.css" rel="stylesheet" />

    <ImportMap />
    <HeadOutlet />
</head>

<body>
    <Routes @rendermode=RenderMode.InteractiveServer />
    <script src="_framework/blazor.web.js"></script>

    <script>
        getElementBounds = (element, param) => {
            const b = element.getBoundingClientRect();
            return [b.x, b.y, b.width, b.height];
        };

        setElementBounds = (element, param) => {
            const [x, y, w, h] = param;
            if(x != -1) element.style.left = `${x}px`;
            if(y != -1) element.style.top = `${y}px`;

            if(w != -1) element.style.width = `${w}px`;
            if(w != -1) element.style.maxWidth = `${w}px`;
            if(w != -1) element.style.minWidth = `${w}px`;

            if(h != -1) element.style.height = `${h}px`;
            if(h != -1) element.style.maxHeight = `${h}px`;
            if(h != -1) element.style.minHeight = `${h}px`;
        };

        resizeCanvas = (element, param) => {
            const ctx = element.getContext('2d');
            const ratio = getPixelRatio(ctx);

            // let container = element;
            // while(container.offsetWidth == 0 || container.offsetHeight == 0) {
            //     const parent = container.parentElement;
            //     if(parent == null) break;
            //     container = parent;
            // }

            element.style.display = "block";
            element.style.width = "100%";
            element.style.height = "100%"
            element.width = element.offsetWidth * ratio;
            element.height = element.offsetHeight * ratio;
            //element.style.maxHeight = element.height / ratio + "px";

            const b = getElementBounds(element);
            return [b[2], b[3], ratio];
        }

        getPixelRatio = (gc) => {
            var dpr = window.devicePixelRatio || 1;
            var bsr = gc.webkitBackingStorePixelRatio ||
                      gc.mozBackingStorePixelRatio ||
                      gc.msBackingStorePixelRatio ||
                      gc.oBackingStorePixelRatio ||
                      gc.backingStorePixelRatio || 1;

            return dpr / bsr;
        }

        var Diyokee = Diyokee || {};
        var dotNetListeners = [];
        Diyokee.monitorResize = (dotNetObjReference) => {
            dotNetListeners.push(dotNetObjReference);
        }

        var notifyHandler = 0;
        window.onresize = () => {
            clearTimeout(notifyHandler);
            notifyHandler = setTimeout(() => {
                dotNetListeners.forEach(dotNetObjReference => {
                    dotNetObjReference.invokeMethodAsync("OnResize");
                });
            }, 500);
        };
    </script>
</body>

</html>