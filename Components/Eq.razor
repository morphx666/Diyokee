@using static Diyokee.Settings
@inject IJSRuntime JS

<div class="knobs-container"
     @oncontextmenu="OpenSubMenu"
     @onblur="@(() => eqOptionsVisible = false)"
     @oncontextmenu:preventDefault="true"
     tabindex="0"
     @ref="knobs">
    <Knob Name="HI" @ref="eqHi" ValueChanged="ApplyEqHi" />
    <Knob Name="MID" @ref="eqMid" ValueChanged="ApplyEqMid" />
    <Knob Name="LO" @ref="eqLo" ValueChanged="ApplyEqLo" />

    <div class="eq-options" style="display: @(eqOptionsVisible ? "block" : "none")">
        @foreach(var eq in Program.Settings.EqualizerProfiles) {
            <div class="eq-option @(eq.Name == EqProfile.Name ? "selected" : "")"
                 @onclick="@(() => {
                    EqProfile = eq;
                    eqOptionsVisible = false;
                    EqProfileChanged.InvokeAsync(EqProfile);
                })">
                <div>@eq.Name</div>
                <div class="frequencies">
                    <span>Low</span><span>@eq.Low.ToString("N2") Hz</span>
                    <span>Mid</span><span>@eq.Mid.ToString("N2") Hz</span>
                    <span>Hi</span><span>@eq.Hi.ToString("N2") Hz</span>
                </div>
            </div>
        }
    </div>
</div>

<script>
    positionSubMenu = (mx, my, container) => {
        setTimeout(() => {
            const containerBounds = getElementBounds(container);
            const subMenu = container.querySelector(".eq-options");
            const subMenuBounds = getElementBounds(subMenu);
            if(mx + subMenuBounds[2] < window.innerWidth) {
                subMenu.style.left = `${mx - containerBounds[0]}px`;
            } else {
                subMenu.style.left = `${mx - containerBounds[0] - subMenuBounds[2]}px`;
            }
            subMenu.style.top = `${my - containerBounds[1]}px`;
        }, 100);
    };
</script>

@code {
    private Knob? eqHi;
    private Knob? eqMid;
    private Knob? eqLo;
    private ElementReference? knobs;
    private EqualizerProfile eqProfile;

    private bool eqOptionsVisible = false;

    public EqualizerProfile EqProfile { 
        get => eqProfile;
        set {
            eqProfile = value;

            ApplyEqHi(eqValues.Hi);
            ApplyEqMid(eqValues.Mid);
            ApplyEqLo(eqValues.Lo);
        }
    }

    public struct EqValues {
        public double Hi;
        public double Mid;
        public double Lo;
    }
    private EqValues eqValues = new();

    [Parameter]
    public EventCallback<EqValues> ValueChanged { get; set; }

    [Parameter]
    public EventCallback<EqualizerProfile> EqProfileChanged { get; set; }

    [CascadingParameter]
    private MouseState? mouseState { get; set; } = null;

    public Eq() {
        eqValues.Hi = 0.5;
        eqValues.Mid = 0.5;
        eqValues.Lo = 0.5;

        EqProfile = Program.Settings.EqualizerProfiles[0];
    }

    public void Reset() {
        eqHi?.SetValue(0.5);
        eqMid?.SetValue(0.5);
        eqLo?.SetValue(0.5);
    }

    private async void ApplyEqHi(double value) {
        eqValues.Hi = value;
        await ValueChanged.InvokeAsync(eqValues);
    }

    private async void ApplyEqMid(double value) {
        eqValues.Mid = value;
        await ValueChanged.InvokeAsync(eqValues);
    }

    private async void ApplyEqLo(double value) {
        eqValues.Lo = value;
        await ValueChanged.InvokeAsync(eqValues);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender) {
            eqHi?.SetInitialValue(eqValues.Hi);
            eqMid?.SetInitialValue(eqValues.Mid);
            eqLo?.SetInitialValue(eqValues.Lo);

            await InvokeAsync(StateHasChanged);
        }
    }

    private void OpenSubMenu(MouseEventArgs e) {
        JS.InvokeVoidAsync("positionSubMenu", mouseState.X, mouseState.Y, knobs);
        eqOptionsVisible = true;
    }
}