@using Diyokee
@inject IJSRuntime JS

<div class="fader-container">
    <div class="name">@((MarkupString)Name)</div>
    <div class="fader @(Orientation == Orientations.Vertical ? "vertical" : "horizontal")" @ref="faderElement">
        <div class="knob button-thin"
        style="@GetKnobCss()"
        @ondblclick="() => SetValue(initialValue)">
        </div>
        <div class="range" style="@GetRangeCss()"></div>
    </div>
</div>

@code {
    public enum Orientations {
        Vertical,
        Horizontal
    }

    [Parameter]
    public Orientations Orientation { get; set; } = Orientations.Vertical;

    [Parameter]
    public double Value { get; set; } = 0.5;

    [Parameter]
    public double DefaultValue { get; set; } = 0.0;

    [Parameter]
    public string Name { get; set; } = "";

    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }

    [CascadingParameter]
    private MouseState mouseState { get; set; } = null!;

    public bool EnableMouseEvents { get; set; } = true;

    private ElementReference faderElement;
    private double rangeTop = 0;
    private double rangeHeight = 0;
    private Bounds? faderBounds;
    private double faderSize = 0;
    private double gutterOffsetTop = 16;
    private double gutterOffsetBottom = 8;
    private double initialValue = 0.5;

    public void SetInitialValue(double value) {
        Value = value;
        initialValue = value;
        UpdateRange();
    }

    public async Task SetValue(double newValue, bool updateState = false) {
        if(newValue < 0) newValue = 0;
        else if(newValue > 1) newValue = 1;

        if(Value == newValue) return;
        Value = newValue;
        UpdateRange();
        await ValueChanged.InvokeAsync(newValue);

        if(updateState) await InvokeAsync(StateHasChanged);
    }

    private void UpdateRange() {
        if(Value >= DefaultValue) {
            rangeTop = (1 - Value) * faderSize + gutterOffsetTop;
            rangeHeight = (Value - DefaultValue) * faderSize;
        } else {
            rangeTop = faderSize / 2 + gutterOffsetTop;
            rangeHeight = (DefaultValue - Value) * faderSize;
        }
    }

    private string GetKnobCss() {
        string prop = Orientation == Orientations.Vertical ? "top" : "left";
        return $"{prop}: calc(10px + 100% - {gutterOffsetTop + gutterOffsetBottom}px - (100% - {gutterOffsetTop + gutterOffsetBottom}px) * {Value})";
    }

    private string GetRangeCss() {
        string prop1 = Orientation == Orientations.Vertical ? "top" : "left";
        string prop2 = Orientation == Orientations.Vertical ? "height" : "width";
        return $"{prop1}: {rangeTop}px; {prop2}: {rangeHeight}px";
    }

    [JSInvokable]
    public async Task OnResize() {
        faderBounds = new Bounds(await JS.InvokeAsync<double[]>("getElementBounds", faderElement));
        faderSize = (Orientation == Orientations.Vertical ? faderBounds.Height : faderBounds.Width) - gutterOffsetTop - gutterOffsetBottom;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender || faderBounds?.Width == 0 || faderBounds?.Height == 0) {
            switch(Orientation) {
                case Orientations.Vertical:
                    gutterOffsetTop = 16;
                    gutterOffsetBottom = 8;
                    break;
                case Orientations.Horizontal:
                    gutterOffsetTop = 16;
                    gutterOffsetBottom = 16;
                    break;
            }

            await OnResize();
            var dotNetReference = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("Diyokee.monitorResize", dotNetReference);
            if(faderBounds.Width == 0 || faderBounds.Height == 0) return;

            UpdateRange();
            await InvokeAsync(StateHasChanged);

            await Task.Run(async () => {
                bool isValid = false;
                while(true) {
                    await Task.Delay(50);
                    if(!EnableMouseEvents) continue;

                    if(!isValid && faderBounds != null &&
                        !mouseState.IsCaptured &&
                        mouseState.ButtonsDown == 1 &&
                        faderBounds.Contains(mouseState.X, mouseState.Y)) {

                        mouseState.IsCaptured = true;
                        isValid = true;
                    }

                    if(isValid) {
                        if(mouseState?.ButtonsDown == 1) {
                            double offset = Orientation == Orientations.Vertical ? mouseState.Y - faderBounds!.Y : mouseState.X - faderBounds!.X;
                            double newValue = (faderSize - (offset - gutterOffsetTop)) / faderSize;
                            if(newValue < 0) {
                                newValue = 0;
                            } else if(newValue > 1) {
                                newValue = 1;
                            }
                            await InvokeAsync(async () => {
                                await SetValue(newValue);
                                StateHasChanged();
                            });
                        } else {
                            mouseState!.IsCaptured = false;
                            isValid = false;
                        }
                    } else if(mouseState?.WheelDelta != 0 && faderBounds!.Contains(mouseState!.X, mouseState.Y)) {
                        double newValue = Value - (mouseState.WheelDelta / 2_000) * (Orientation == Orientations.Horizontal ? -1 : 1);
                        if(newValue < 0) {
                            newValue = 0;
                        } else if(newValue > 1) {
                            newValue = 1;
                        }
                        await InvokeAsync(async () => {
                            await SetValue(newValue);
                            StateHasChanged();
                        });

                        mouseState.WheelDelta = 0;
                    }
                }
            });
        }
    }
}
