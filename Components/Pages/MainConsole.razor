@using System.Diagnostics
@using Diyokee
@using Diyokee.MediaProviders
@using static Diyokee.Settings
@inject IJSRuntime JS

@page "/"

<PageTitle>Diyokee</PageTitle>

<div
    class="main-console"
    tabindex="0"
    @onkeydown="HandleKeyDown"
    @onkeydown:preventDefault="true"
    @onmousedown="HandleMouseDown"
    @onmousemove="HandleMouseMove"
    @onmouseup="HandleMouseUp"
    @onmousewheel="HandleMouseWheel">
    <CascadingValue Value="@mouseState">
        <div class="players" @ref="playersPanel">
            <div class="player">
                <Player
                Settings="Program.Settings.Playback.Players[0]"
                File="@player1File"
                RequestedFileCue="() => LoadSelectedFile(player1)"
                OtherPlayer="@player2"
                @ref="player1" />
            </div>
            <div class="mixer">
                <div class="controls"></div>
                <div class="crossfade-controls">
                    <div class="button-3d" @onclick="() => HandleAutoCrossFade(-1)"><i class="fa-solid fa-caret-left"></i></div>
                    <Fader Orientation="Fader.Orientations.Horizontal" ValueChanged="ApplyCrossfaderVolume" DefaultValue="0.5" @ref="crossFader" />
                    <div class="button-3d" @onclick="() => HandleAutoCrossFade(+1)"><i class="fa-solid fa-caret-right"></i></div>
                </div>
            </div>
            <div class="player">
                <Player
                Settings="Program.Settings.Playback.Players[1]"
                File="@player2File"
                RequestedFileCue="() => LoadSelectedFile(player2)"
                OtherPlayer="@player1"
                @ref="player2" />
            </div>
        </div>

        <PanelResize
        Orientation="PanelResize.Orientations.Vertical"
        ResizeElement="playersPanel" 
        Name="main-resize-vertical"
        OnResizeEnd="HandleDividerResize"
        Constrains="playersConstrains" />

        <div class="media">
            <div class="sources panel" @ref="mediaProviderPanel">
                <MediaProvider Provider="@mediaProvider" SelectedFolderChanged="SelectedFolderChanged" />
            </div>

            <PanelResize
            Orientation="PanelResize.Orientations.Horizontal"
            ResizeElement="mediaProviderPanel"
            Name="main-resize-horizontal"
            OnResizeEnd="HandleDividerResize"
            Constrains="mediaProviderConstrains" />

            <FilesUI
            Provider="@mediaProvider"
            RelativePath="@selectedFolder"
            SelectedFileChanged="SelectedFileChanged"
            TrackSettingsDialogOpen="() => SetPlayersMouseCapturing(false)"
            TrackSettingsDialogClosed="() => SetPlayersMouseCapturing(true)" />
        </div>
    </CascadingValue>

    <SettingsUI OnSave="UpdateApp" OnClose="() => SetPlayersMouseCapturing(true)" @ref="settingsUi" />
</div>

@code {
    private IMediaProvider mediaProvider;
    private string selectedFolder = "";

    private DFile? selectedFile = null;
    private DFile? player1File = null;
    private DFile? player2File = null;

    private Player? player1;
    private Player? player2;

    private SettingsUI settingsUi = null!;

    private Fader? crossFader;

    private MouseState mouseState = new();

    private ElementReference playersPanel;
    private Dictionary<PanelResize.ConstrainKeys, string> playersConstrains = new() { { PanelResize.ConstrainKeys.Min, "396" } };
    private ElementReference mediaProviderPanel;
    private Dictionary<PanelResize.ConstrainKeys, string> mediaProviderConstrains = new() { { PanelResize.ConstrainKeys.Min, "250" } };

    private bool shouldRender = true;

    public MainConsole() {
        foreach(Settings.MediaProvider mp in Program.Settings.MediaProviders) {
            if(mp.Type == "local") {
                // Use the first local media provider found (for now)
                this.mediaProvider = new MediaProviderLocal(mp.Name, 
                                                            string.IsNullOrEmpty(mp.RootDirectory)
                                                            ? Environment.GetFolderPath(Environment.SpecialFolder.MyMusic)
                                                            : mp.RootDirectory);
                break;
            }
        }

        if(this.mediaProvider == null) {
            throw new Exception("No valid media provider found");
        }
    }

    private void LoadSelectedFile(Player? player) {
        if(player == player1) {
            player1File = selectedFile;
        } else if(player == player2) {
            player2File = selectedFile;
        }
        shouldRender = true;
    }

    private void SelectedFolderChanged(string folder) {
        selectedFolder = folder;
        shouldRender = true;
    }

    private void SelectedFileChanged(DFile file) {
        selectedFile = file;
        shouldRender = true;

        if(player1!.File?.Filename == file.Filename) player1.SetFile(file, false);
        if(player2!.File?.Filename == file.Filename) player2.SetFile(file, false);
    }

    private void HandleKeyDown(KeyboardEventArgs e) {
        if(e.CtrlKey) {
            switch(e.Code) {
                case "KeyA":
                    player1File = selectedFile;
                    break;
                case "KeyB":
                    player2File = selectedFile;
                    break;
                case "KeyS":
                    SetPlayersMouseCapturing(false);
                    settingsUi.Open();
                    break;
            }
        }
    }

    private void HandleMouseDown(MouseEventArgs e) {
        mouseState.X = e.ClientX;
        mouseState.Y = e.ClientY;
        mouseState.ButtonsDown = e.Buttons;
    }

    private void HandleMouseMove(MouseEventArgs e) {
        mouseState.X = e.ClientX;
        mouseState.Y = e.ClientY;
    }

    private void HandleMouseUp(MouseEventArgs e) {
        mouseState.X = e.ClientX;
        mouseState.Y = e.ClientY;
        mouseState.ButtonsDown = e.Buttons;
    }

    private void HandleMouseWheel(WheelEventArgs e) {
        mouseState.WheelDelta = e.DeltaY;
    }

    private void HandleDividerResize((string name, double value) args) {
        if(Program.Settings.UIElements.ContainsKey(args.name)) {
            Program.Settings.UIElements[args.name] = args.value.ToString();
        } else {
            Program.Settings.UIElements.Add(args.name, args.value.ToString());
        }
    }

    private CancellationTokenSource? cancellationTokenSource = null;
    private Task? crossfadeTask = null;
    private void HandleAutoCrossFade(int direction) {
        if(crossFader == null) return;

        if(cancellationTokenSource == null) {
            cancellationTokenSource = new CancellationTokenSource();
        } else {
            cancellationTokenSource.Cancel();
            crossfadeTask?.Wait();
            cancellationTokenSource.Dispose();
            cancellationTokenSource = new CancellationTokenSource();
        }

        int duration = 2; // seconds
        crossfadeTask = Task.Run(async () => {
            while(!cancellationTokenSource.IsCancellationRequested) {
                double value = crossFader.Value - direction / 100.0;
                if(value < 0 || value > 1) break;
                await crossFader.SetValue(value, true);
                await Task.Delay(10 * duration);
            }
        }, cancellationTokenSource.Token);
    }

    private void ApplyCrossfaderVolume(double value) {
        player1?.SetCrossFaderVolume(value >= 0.5 ? 1 : 2 * value);
        player2?.SetCrossFaderVolume(value <= 0.5 ? 1 : 2 * (1 - value));
    }

    private async void UpdateApp() {
        EqualizerProfile equalizerProfile = Program.Settings.EqualizerProfiles.FirstOrDefault(p => p.Name == Program.Settings.Playback.EqProfile) ?? Program.Settings.EqualizerProfiles[0];
        player1!.EqControls.EqProfile = equalizerProfile;
        player2!.EqControls.EqProfile = equalizerProfile;

        shouldRender = true;
        await InvokeAsync(StateHasChanged);
    }

    private void SetPlayersMouseCapturing(bool state) {
        player1!.EnableMouseEvents = state;
        player2!.EnableMouseEvents = state;
    }

    protected override bool ShouldRender() {
        if(shouldRender) {
            shouldRender = false;
            return true;
        }
        return false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender) {
            await Task.Delay(500);
            await InvokeAsync(StateHasChanged); // This updates the SYNC->PLAYER buttons
        }
    }
}