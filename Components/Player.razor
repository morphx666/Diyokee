@using System.Diagnostics
@using System.Drawing
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Diyokee
@using Un4seen.Bass
@using Un4seen.Bass.AddOn.Fx
@using Un4seen.Bass.AddOn.Mix
@using static Diyokee.Settings
@inject IJSRuntime JS

<div class="player-container">
    @if(!MinimalMode) {
        <div class="header">
            <div class="file-info ellipsis">
                <span class="ellipsis">@file?.Title</span>
                <span class="ellipsis">@file?.Artist</span>
                <span class="ellipsis">@file?.Album</span>
            </div>
            <div class="time">
                <span>@DFile.FormatTime(playbackPosition)</span>
                <span>-@DFile.FormatTime(GetRemainingTime())</span>
                <span>&nbsp;</span>
            </div>
            <div class="bpm-key">
                <span>@CalcBpm()</span>
                <span>@GetBpmAdjustment()</span>
                <span>&nbsp;@keyTools.ConvertTo(file?.Key ?? "", KeyTools.Notations.CamelotKey)</span>
            </div>
            <div class="player-name" style="background-color: @Settings.Color">
                @Settings.Name
            </div>
        </div>
    }

    <div class="waveform-full">
        <Waveform CssColor="@Settings.Color"
        Mode="Waveform.Modes.Full"
        BeatMarkers="@beatMarkers"
        DownbeatAt="@fileDownbeatAt"
        MaxPeak="@maxPeak"
        Peaks="@peaks"
        SecondsToPosX="@secondsToPosX"
        WaveformWidth="@waveformWidth"
        Player="this"
        @ref="waveformFull" />
    </div>

    <div class="waveform @(Settings.ReverseControls ? "reverse" : "")">
        <Waveform CssColor="@Settings.Color"
        Mode="Waveform.Modes.AudioSynced"
        BeatMarkers="@beatMarkers"
        DownbeatAt="@fileDownbeatAt"
        MaxPeak="@maxPeak"
        Peaks="@peaks"
        SecondsToPosX="@secondsToPosX"
        WaveformWidth="@waveformWidth"
        Loop="loop"
        Player="this"
        @ref="waveform" />

        <VuMeter @ref="vuMeter" />
        <Fader Orientation="Fader.Orientations.Vertical" ValueChanged="ApplyVolume" Name="<i class='fa-solid fa-volume-high'></i>" DefaultValue="0" @ref="faderVolume" />

        @if(!MinimalMode) {
            <Fader Orientation="Fader.Orientations.Vertical" ValueChanged="ApplyTempo" Name="<i class='fa-solid fa-music'></i>" DefaultValue="0.5" @ref="faderTempo" />
            <Eq ValueChanged="ApplyEqValues" EqProfileChanged="EqProfileChanged" @ref="EqControls" />
        }
    </div>

    <div class="transport">
        <div class="button-3d icon led @(IsPlaying ? "green" : "")" @onmouseup="(e) => HandlePlayClick(e, Program.Settings.Playback.SyncPlayback)"><i class="fa-solid fa-play"></i></div>
        <div class="button-3d icon" @onmouseup="HandleStopClick"><i class="fa-solid fa-stop"></i></div>
        <div class="button-3d icon"
        @onmousedown="(e) => HandlePlayClick(e, false)"
        @onmouseup="HandleStopAndSnapClick">
            <i class="fa-solid fa-forward-step"></i>
        </div>
        <div class="button-3d icon" @onmouseup="HandleSnapToClosestBeatMarker"><i class="fa-solid fa-down-left-and-up-right-to-center fa-rotate-by" style="--fa-rotate-angle: 45deg;"></i></div>
        @if(!MinimalMode) {
            <div class="button-3d icon" @onmouseup="HandleRequestedFileCue"><i class="fa-solid fa-eject"></i></div>
            <div class="button-3d icon" @onmouseup="HandleSyncBPMToOtherPlayer"><i class="fa-solid fa-arrow-right-from-bracket"></i> @(OtherPlayer?.Settings.Name ?? "")</div>
            <div class="sync-adjust">
                <span>SYNC</span>
                <div class="sync-buttons">
                    <div class="button-3d" @onmousedown="SlowDown" @onmouseup="ResetSpeed"><i class="fa-solid fa-left-long"></i></div>
                    <div class="button-3d" @onmousedown="SpeedUp" @onmouseup="ResetSpeed"><i class="fa-solid fa-right-long"></i></div>
                </div>
            </div>
        }
    </div>

    @if(!MinimalMode) {
        <div class="loop-container">
            <div class="button-thin led @(loop.Enabled ? "green" : "")" @onclick="ToggleLoop">Loop</div>
            <div class="loop-size-container">
                @foreach(var size in loopSizes) {
                    <div class="button @(loopSize == size.Item2 ? "selected" : "")"
                    @onclick="() => SetLoopSize(size.Item2, false)">
                        @size.Item1
                    </div>
                }
            </div>
            <div class="button-thin no-click">Jump</div>
            <div class="loop-size-container">
                @foreach(var size in loopSizes) {
                    <div class="button @(jumpSize == size.Item2 ? "selected" : "")"
                    @onclick="() => SetJumpSize(size.Item2)">
                        @size.Item1
                    </div>
                }

                <div class="jump-buttons">
                    <div class="button-thin" @onclick="() => DoJump(-1)"><i class="fa-solid fa-caret-left"></i></div>
                    <div class="button-thin" @onclick="() => DoJump(+1)"><i class="fa-solid fa-caret-right"></i></div>
                </div>
            </div>
            <div class="lock-button"><i class="fa-solid @(loopJumpLock ? "fa-lock" : "fa-lock-open")" @onclick="ToggleLoopJumpSync"></i></div>
        </div>
    }
</div>

@code {
    private int streamHandle = 0;
    private int fxHandle = 0;
    private List<int> eqHandles = [];
    private BASS_BFX_PEAKEQ eqParams = new();
    private List<int> splitterStreams = [];
    private int masterSplitterHandle = 0;
    private string lastFilename = "";

    private double trackGain = 1;
    private double crossFaderVolume = 1;

    private DFile? file = null;
    private Fader? faderVolume;
    private Fader? faderTempo;
    private Waveform? waveform;
    private Waveform? waveformFull;
    private VuMeter? vuMeter;
    public Eq EqControls = null!;

    private double fileBPM = 0;
    private double fileDownbeatAt = 0;
    private int waveformWidth = 0;
    private long trackLengthBytes = 0;
    private double playbackPosition = 0;
    private long waveformStepLength = 0;
    private bool queueAutoSnap = false;
    private double[] peaks = [];
    private double maxPeak = 1.0;
    private double beatsPerSecond;
    private double secondsPerBeat;
    private double secondsToPosX;
    private double currentTempoValue;

    private Loop loop = new();
    private (string, double)[] loopSizes = {
        ("¼", 0.25),
        ("½", 0.50),
        ("1", 1.00),
        ("2", 2.00),
        ("4", 4.00),
        ("8", 8.00),
        ("16", 16.00),
        ("32", 32.00)
    };
    private double loopSize = 8.0;
    private double jumpSize = 8.0;
    private bool loopJumpLock = true;

    private List<(double X, double Seconds)> beatMarkers = new();
    private double cuePoint = 0;

    private KeyTools keyTools = new();

    public bool IsPlaying { get; set; }

    [Parameter]
    public DFile? File { // TODO: Apply the same logic as in FilesUI
        get => file;
        set {
            if(value != null && lastFilename != value.Filename) {
                if(IsPlaying && Program.Settings.Playback.LockOnPlay) return;

                lastFilename = value.Filename;
                file = value;
                Stop(false);
                LoadFile();
            }
        }
    }

    [Parameter]
    public EventCallback RequestedFileCue { get; set; }

    [Parameter]
    public PlayerSettings Settings { get; set; } = null!;

    [Parameter]
    public Player? OtherPlayer { get; set; } = null;

    [Parameter]
    public bool MinimalMode { get; set; } = false;

    public bool InBeat { get; set; } = false;

    public int InBeatIndex { get; set; } = 1;

    public int WaveformBarWidth { get; set; }

    private bool enableMouseEvents = true;
    public bool EnableMouseEvents {
        get => enableMouseEvents;
        set {
            enableMouseEvents = value;
            if(!MinimalMode) {
                EqControls.EnableMouseEvents = value;
                faderTempo!.EnableMouseEvents = value;
            }
            faderVolume!.EnableMouseEvents = value;
            waveform!.EnableMouseEvents = value;
            waveformFull!.EnableMouseEvents = value;
        }
    }

    public Player() {
        loopSyncProc = new SYNCPROC(DoLoop);

        Task.Run(MonitorPlayback);
        Task.Run(MonitorBeats);
    }

    public void SetFile(DFile file, bool fullReset = true) {
        if(fullReset) {
            lastFilename = "";
            File = file;
        } else {
            this.file = file;
            SetParameters();
            SetLoopSize(loopSize, false);
        }
    }

    public void SetCrossFaderVolume(double value) {
        crossFaderVolume = value;
        ApplyVolume(faderVolume?.Value ?? 0);
    }

    public async void SyncBPMToOtherPlayer() {
        if(OtherPlayer?.File == null || fileBPM == 0) return;

        double tempo = (OtherPlayer?.AdjustedBPM ?? 0) / fileBPM * 1.5 - 1.0;
        await faderTempo!.SetValue(tempo);
    }

    private void HandlePlayClick(MouseEventArgs e, bool autoSync) {
        if(e.Button == 0) Play(autoSync);
    }

    private void HandleStopClick(MouseEventArgs e) {
        if(e.Button == 0) Stop(false);
    }

    private void HandleStopAndSnapClick(MouseEventArgs e) {
        if(e.Button == 0) Stop(true);
    }

    private void HandleSnapToClosestBeatMarker(MouseEventArgs e) {
        if(e.Button == 0) SnapToClosestBeatMarker();
    }

    private void HandleRequestedFileCue(MouseEventArgs e) {
        if(e.Button == 0) RequestedFileCue.InvokeAsync();
    }

    private void HandleSyncBPMToOtherPlayer(MouseEventArgs e) {
        if(e.Button == 0) SyncBPMToOtherPlayer();
    }

    public void Play(bool autoSync) {
        if(masterSplitterHandle == 0) return;
        if(IsPlaying) {
            splitterStreams.ForEach(h => BassMix.BASS_Mixer_ChannelPause(h));
            IsPlaying = false;
        } else {
            if(autoSync && (OtherPlayer?.IsPlaying ?? false)) {
                Task.Run(async () => { // TODO: This should be optional
                    while(true) {
                        await Task.Delay(1);
                        if(OtherPlayer.InBeat && OtherPlayer.InBeatIndex == InBeatIndex) {
                            long p = BassMix.BASS_Mixer_ChannelGetPosition(masterSplitterHandle);
                            long offset = Bass.BASS_ChannelSeconds2Bytes(streamHandle, secondsPerBeat / 10);

                            Program.BassMixHandles.ForEach(h => BassMix.BASS_Split_StreamReset(h.Handle));
                            splitterStreams.ForEach(h => {
                                BassMix.BASS_Mixer_ChannelSetPosition(h, p + offset);
                                BassMix.BASS_Mixer_ChannelPlay(h);
                            });

                            IsPlaying = true;
                            break;
                        }
                    }
                });
            } else {
                Program.BassMixHandles.ForEach(h => BassMix.BASS_Split_StreamReset(h.Handle));
                splitterStreams.ForEach(h => BassMix.BASS_Mixer_ChannelPlay(h));
                IsPlaying = true;
            }
        }
    }

    public void Stop(bool resetToCuePoint) {
        if(masterSplitterHandle == 0) return;
        splitterStreams.ForEach(h => {
            BassMix.BASS_Mixer_ChannelPause(h);
            BassMix.BASS_Mixer_ChannelSetPosition(h, Bass.BASS_ChannelSeconds2Bytes(h, resetToCuePoint ? cuePoint : 0));
        });
        IsPlaying = false;
    }

    private void ApplyVolume(double value) {
        if(masterSplitterHandle == 0) return;
        splitterStreams.ForEach(h => Bass.BASS_ChannelSetAttribute(h, BASSAttribute.BASS_ATTRIB_VOL, (float)(trackGain * value * crossFaderVolume)));
    }

    private void ApplyTempo() {
        if(masterSplitterHandle == 0) return;
        // tempo = ((1 + X) / 1.5 - 1) * 100
        // X = (tempo / 100 * 1.5) - 1
        double tempo = ((1.0 + (faderTempo?.Value ?? 0.5)) / 1.5 - 1.0) * 100.0;

        Bass.BASS_ChannelSetAttribute(fxHandle, BASSAttribute.BASS_ATTRIB_TEMPO, (float)tempo);
        if(Program.Settings.Playback.SyncPlayersBpm) {
            // FIXME: Implement to login to avoid recursion
            //OtherPlayer?.SyncBPMToOtherPlayer();
        }
    }

    private void ApplyEqValues(Eq.EqValues eqValues) {
        eqHandles.ForEach(h => {
            // Lo
            eqParams.lBand = 0;
            eqParams.fCenter = EqControls.EqProfile.Low;
            eqParams.fGain = (float)(eqValues.Lo * 30 - 15);
            Bass.BASS_FXSetParameters(h, eqParams);

            // Mid
            eqParams.lBand = 1;
            eqParams.fCenter = EqControls.EqProfile.Mid;
            eqParams.fGain = (float)(eqValues.Mid * 30 - 15);
            Bass.BASS_FXSetParameters(h, eqParams);

            // Hi
            eqParams.lBand = 2;
            eqParams.fCenter = EqControls.EqProfile.Hi;
            eqParams.fGain = (float)(eqValues.Hi * 30 - 15);
            Bass.BASS_FXSetParameters(h, eqParams);
        });
    }

    private void EqProfileChanged(EqualizerProfile eqProfile) {
        if(OtherPlayer != null) OtherPlayer.EqControls.EqProfile = eqProfile;
        UpdateSettings();
    }

    private string CalcBpm() {
        double bpm = (file?.BPM ?? 0) * (1.0 + (faderTempo?.Value ?? 0)) / 1.5;
        return bpm.ToString("N2");
    }

    private string GetBpmAdjustment() {
        double bpm = fileBPM * (1.0 + (faderTempo?.Value ?? 0)) / 1.5;
        double adjustment = bpm > 0 ? 100.0 - fileBPM / bpm * 100.0 : 0;
        return $"{(adjustment > 0 ? "+" : "")}{adjustment:N2}%";
    }

    private double GetRemainingTime() {
        if(file?.Duration > 0) return (file?.Duration - playbackPosition) ?? 0;
        return 0;
    }

    private double AdjustedBPM {
        get => fileBPM * (1.0 + (faderTempo?.Value ?? 0)) / 1.5;
    }

    private void SlowDown(MouseEventArgs e) {
        if(e.Button == 0) {
            currentTempoValue = faderTempo!.Value;
            faderTempo?.SetValue(faderTempo.Value - 0.1);
        }
    }

    private void SpeedUp(MouseEventArgs e) {
        if(e.Button == 0) {
            currentTempoValue = faderTempo!.Value;
            faderTempo?.SetValue(faderTempo.Value + 0.1);
        }
    }

    private void ResetSpeed(MouseEventArgs e) {
        if(e.Button == 0) faderTempo?.SetValue(currentTempoValue);
    }

    // private DSPPROC dspProc = null!;
    // private double[] din = new double[5];
    // private double[] dout = new double[5];
    private void LoadFile() {
        IsPlaying = false;

        if(streamHandle != 0) {
            BassMix.BASS_Mixer_ChannelRemove(streamHandle);
            Bass.BASS_ChannelStop(streamHandle);
            Bass.BASS_StreamFree(streamHandle);
            streamHandle = 0;
        }

        if(file == null || faderVolume == null) return;

        if(CreateStreams() != BASSError.BASS_OK) {
            // TODO: Do something so the user knows the file cannot be played
        }

        // See SetBassSpeaker from RemoteDJ
        //  | BASSFlag.BASS_SPEAKER_FRONTLEFT | BASSFlag.BASS_MUSIC_MONO | BASSFlag.BASS_MIXER_CHAN_DOWNMIX);

        // // Resonant lowpass filter
        // // For highpass filter, just change the sign of the feedback (HPF = sample - out ?)
        // // https://github.com/bdejong/musicdsp
        // // http://192.168.1.8:88/Filters/26-moog-vcf-variation-2.html (RPi4 (/home/xfx/musicdsp/build/html): sudo python -m http.server 88)
        // dspProc = new((int handle, int channel, IntPtr buffer, int length, IntPtr user) => {
        //     int l4 = length / 4;
        //     double[] input = new double[l4];
        //     float[] data = new float[l4];
        //     System.Runtime.InteropServices.Marshal.Copy(buffer, data, 0, l4);

        //     double fc = 0.5;
        //     double res = 3;
        //     double f = fc * 1.16;
        //     double fb = res * (1.0 - 0.15 * f * f);

        //     for(int i = 0; i < l4; i++) {
        //         input[i] = data[i];

        //         input[i] -= dout[4] * fb;
        //         input[i] *= 0.35013 * (f * f) * (f * f);
        //         dout[1] = input[i] + 0.3 * din[1] + (1 - f) * dout[1]; // Pole 1
        //         din[1] = input[i];
        //         dout[2] = dout[1] + 0.3 * din[2] + (1 - f) * dout[2];  // Pole 2
        //         din[2] = dout[1];
        //         dout[3] = dout[2] + 0.3 * din[3] + (1 - f) * dout[3];  // Pole 3
        //         din[3] = dout[2];
        //         dout[4] = dout[3] + 0.3 * din[4] + (1 - f) * dout[4];  // Pole 4
        //         din[4] = dout[3];

        //         data[i] = (float)dout[4];
        //     }

        //     System.Runtime.InteropServices.Marshal.Copy(data, 0, buffer, l4);
        // });
        // Bass.BASS_ChannelSetDSP(fxHandle, dspProc, IntPtr.Zero, 0);

        trackGain = Math.Pow(10, (file.HasReplayGain ? file.ReplayGain : -2) / 20.0);
        ApplyVolume(faderVolume!.Value);
        SetupEQ();
        faderTempo?.SetValue(0.5);
        if(loop.Enabled) ToggleLoop();

        trackLengthBytes = Bass.BASS_ChannelGetLength(streamHandle, BASSMode.BASS_POS_BYTE);
        waveformStepLength = Bass.BASS_ChannelSeconds2Bytes(streamHandle, FilesUI.TimeSlice);

        // peaks = [];
        // beatMarkers.Clear();
        Task.Run(async () => {
            while(!SetParameters()) await Task.Delay(1000);
            queueAutoSnap = !IsPlaying;
        });
    }

    private BASSError CreateStreams() {
        BASSError bassErrorCode = BASSError.BASS_OK;

        streamHandle = Bass.BASS_StreamCreateFile(file?.Filename, 0, 0, BASSFlag.BASS_STREAM_DECODE
                                                                        | BASSFlag.BASS_STREAM_PRESCAN
                                                                        | BASSFlag.BASS_ASYNCFILE
                                                                        | BASSFlag.BASS_SAMPLE_FLOAT);
        bassErrorCode = Bass.BASS_ErrorGetCode();
        if(streamHandle == 0 || bassErrorCode != BASSError.BASS_OK) return bassErrorCode;

        fxHandle = BassFx.BASS_FX_TempoCreate(streamHandle, BASSFlag.BASS_FX_TEMPO_ALGO_SHANNON
                                                            | BASSFlag.BASS_STREAM_DECODE
                                                            | BASSFlag.BASS_FX_FREESOURCE);
        bassErrorCode = Bass.BASS_ErrorGetCode();
        if(fxHandle == 0 || bassErrorCode != BASSError.BASS_OK) return bassErrorCode;

        splitterStreams.Clear();
        masterSplitterHandle = 0;
        foreach(var mixHandle in Program.BassMixHandles) {
            int splitterHandle = BassMix.BASS_Split_StreamCreate(fxHandle, BASSFlag.BASS_STREAM_DECODE, null);

            bassErrorCode = Bass.BASS_ErrorGetCode();
            if(splitterHandle == 0 || bassErrorCode != BASSError.BASS_OK) return bassErrorCode;
            splitterStreams.Add(splitterHandle);

            bool r = BassMix.BASS_Mixer_StreamAddChannel(mixHandle.Handle, splitterHandle, BASSFlag.BASS_MIXER_CHAN_PAUSE
                                                                                           | BASSFlag.BASS_MIXER_CHAN_NORAMPIN
                                                                                           | BASSFlag.BASS_MIXER_CHAN_BUFFER
                                                                                           | BASSFlag.BASS_STREAM_AUTOFREE
                                                                                           | BASSFlag.BASS_MIXER_CHAN_MATRIX);
            bassErrorCode = Bass.BASS_ErrorGetCode();
            if(!r || bassErrorCode != BASSError.BASS_OK) return bassErrorCode;


            float[,] matrix = GetSpeakersMatrix(mixHandle.DeviceIndex);
            r = BassMix.BASS_Mixer_ChannelSetMatrix(splitterHandle, matrix);
            bassErrorCode = Bass.BASS_ErrorGetCode();
            if(!r || bassErrorCode != BASSError.BASS_OK) return bassErrorCode;
        }

        masterSplitterHandle = splitterStreams[0];
        return BASSError.BASS_OK;
    }

    private float[,] GetSpeakersMatrix(int deviceIndex) {
        float[,] matrix;
        var audioDevices = Program.Settings.Audio.MainOutputDevice.Concat(Program.Settings.Audio.MonitorDevice).ToArray();
        var speakers = audioDevices[deviceIndex].Speakers;
        int index = Program.GetDeviceIndexByName(audioDevices[deviceIndex].Name);
        Bass.BASS_SetDevice(index);
        switch(Bass.BASS_GetInfo().speakers) {
            case 2:
                matrix = new float[,] {
                        {
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.FrontLeft) != 0) ? 1 : 0,
                            0
                        },
                        {
                            0,
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.FrontRight) != 0) ? 1 : 0
                        }
        };
                break;

            case 4:
                matrix = new float[,] {
                        {
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.FrontLeft) != 0) ? 1 : 0,
                            0
                        },
                        {
                            0,
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.FrontRight) != 0) ? 1 : 0
                        },
                        {
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.SideLeft) != 0) ? 1 : 0,
                            0
                        },
                        {
                            0,
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.SideRight) != 0) ? 1 : 0,
                        }
        };
                break;

            case 6:
                matrix = new float[,] {
                        {
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.FrontLeft) != 0) ? 1 : 0,
                            0
                        },
                        {
                            0,
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.FrontRight) != 0) ? 1 : 0
                        },
                        {
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.Center) != 0) ? 1 : 0,
                            0
                        },
                        {
                            0,
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.LFE) != 0) ? 1 : 0
                        },
                        {
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.SideLeft) != 0) ? 1 : 0,
                            0
                        },
                        {
                            0,
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.SideRight) != 0) ? 1 : 0
                        }
        };
                break;

            case 8:
                matrix = new float[,] {
                        {
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.FrontLeft) != 0) ? 1 : 0,
                            0
                        },
                        {
                            0,
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.FrontRight) != 0) ? 1 : 0
                        },
                        {
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.Center) != 0) ? 1 : 0,
                            0
                        },
                        {
                            0,
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.LFE) != 0) ? 1 : 0
                        },
                        {
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.SideLeft) != 0) ? 1 : 0,
                            0
                        },
                        {
                            0,
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.SideRight) != 0) ? 1 : 0
                        },
                        {
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.RearLeft) != 0) ? 1 : 0,
                            0
                        },
                        {
                            0,
                            speakers.Any(c => (c & AudioDevice.DeviceSpeakers.RearRight) != 0) ? 1 : 0
                        }
        };
                break;

            default:
                matrix = new float[,] {
                        {
                            0,
                            0
                        }
        };
                break;
        }

        return matrix;
    }

    private void SetupEQ() {
        if(EqControls == null) return;
        eqHandles.Clear();

        // set peaking equalizer effect with no bands
        splitterStreams.ForEach(h => {
            int eqHandle = Bass.BASS_ChannelSetFX(h, BASSFXType.BASS_FX_BFX_PEAKEQ, 0);

            // setup the EQ bands
            eqParams.fQ = 0f;
            eqParams.fBandwidth = 2.5f;
            eqParams.lChannel = BASSFXChan.BASS_BFX_CHANALL;

            // create 1st band for bass
            eqParams.lBand = 0;
            eqParams.fCenter = EqControls.EqProfile.Low;
            Bass.BASS_FXSetParameters(eqHandle, eqParams);

            // create 2nd band for mid
            eqParams.lBand = 1;
            eqParams.fCenter = EqControls.EqProfile.Mid;
            Bass.BASS_FXSetParameters(eqHandle, eqParams);

            // create 3rd band for treble
            eqParams.lBand = 2;
            eqParams.fCenter = EqControls.EqProfile.Hi;
            Bass.BASS_FXSetParameters(eqHandle, eqParams);

            eqHandles.Add(eqHandle);
        });

        EqControls?.Reset();
    }

    public bool SetParameters() {
        peaks = [];
        beatMarkers.Clear();
        waveformFull?.UpdateFullWaveform();

        if(file == null || !file.WaveformUnZipped.Contains('|')) return false;

        peaks = file.WaveformUnZipped.Split('|').Select(p => double.Parse(p)).ToArray();
        maxPeak = peaks.Max();

        waveformWidth = peaks.Length * WaveformBarWidth;
        beatsPerSecond = file!.BPM / 60.0;
        secondsPerBeat = 1.0 / beatsPerSecond;
        secondsToPosX = 1.0 / (file.Duration == 0 ? 1 : file.Duration) * waveformWidth;

        // Cache values to avoid having to check for nullability every time
        fileBPM = file.BPM;
        fileDownbeatAt = file.DownbeatAt;

        // x = s / file.Duration * waveformWidth
        // s = x / waveformWidth * file.Duration

        GenerateBeatMarkers();
        waveformFull?.UpdateFullWaveform();

        return true;
    }

    private void GenerateBeatMarkers() {
        if(fileDownbeatAt == -1) return;

        double t1 = fileDownbeatAt;
        double t2 = t1 - secondsPerBeat;
        while(t1 < file!.Duration || t2 >= 0) {
            if(t1 < file.Duration) {
                beatMarkers.Add((t1 * secondsToPosX, t1));
                t1 += secondsPerBeat;
            }
            if(t2 >= 0) {
                beatMarkers.Insert(0, (t2 * secondsToPosX, t2));
                t2 -= secondsPerBeat;
            }
        }
    }

    private void SnapToClosestBeatMarker() {
        if(beatMarkers.Count == 0) return;
        long position = GetClosestBeatMarker();
        splitterStreams.ForEach(h => BassMix.BASS_Mixer_ChannelSetPosition(h, position));
    }

    private long GetClosestBeatMarker() {
        double playbackPositionSeconds = Bass.BASS_ChannelBytes2Seconds(streamHandle, BassMix.BASS_Mixer_ChannelGetPosition(masterSplitterHandle));

        int closestIndex = 0;
        double closestDistance = float.MaxValue;
        for(int i = 0; i < beatMarkers.Count; i++) {
            double distance = Math.Abs(beatMarkers[i].Seconds - playbackPositionSeconds);
            if(distance < closestDistance) {
                closestDistance = distance;
                closestIndex = i;
            }
        }

        double seconds = beatMarkers[closestIndex].Seconds;
        cuePoint = seconds;
        return Bass.BASS_ChannelSeconds2Bytes(masterSplitterHandle, cuePoint);
    }

    private void ToggleLoop() {
        if(file == null) return;
        loop.Enabled = !loop.Enabled;
        SetLoopSize(loopSize, true);
    }

    private SYNCPROC loopSyncProc = null!;
    private void SetLoopSize(double size, bool resetStart) {
        loopSize = size;
        if(loopJumpLock) jumpSize = loopSize;

        double position = Bass.BASS_ChannelBytes2Seconds(masterSplitterHandle, GetClosestBeatMarker());
        if(resetStart) loop.Start = position;
        loop.End = loop.Start + loopSize / beatsPerSecond;

        if(loop.BASSHandle != 0 && resetStart) {
            Bass.BASS_ChannelRemoveSync(masterSplitterHandle, loop.BASSHandle);
            loop.BASSHandle = 0;
        }

        if(loop.Enabled) {
            bool resetLoop = position <= loop.End && loopSize > 1;
            loop.StartBytes = Bass.BASS_ChannelSeconds2Bytes(masterSplitterHandle, loop.Start);
            loop.EndBytes = Bass.BASS_ChannelSeconds2Bytes(masterSplitterHandle, loop.End);

            if(loop.EndBytes > trackLengthBytes) {
                loop.Enabled = false;
                return;
            }

            if(resetStart || resetLoop) {
                loop.Reset = false;

                Bass.BASS_ChannelLock(masterSplitterHandle, true);
                if(loop.BASSHandle != 0) {
                    Bass.BASS_ChannelRemoveSync(masterSplitterHandle, loop.BASSHandle);
                    loop.BASSHandle = 0;
                }
                loop.BASSHandle = Bass.BASS_ChannelSetSync(masterSplitterHandle, BASSSync.BASS_SYNC_POS | BASSSync.BASS_SYNC_MIXTIME, loop.EndBytes, loopSyncProc, IntPtr.Zero);
                Bass.BASS_ChannelLock(masterSplitterHandle, false);
            } else {
                loop.Reset = true;
            }
        }

        UpdateSettings();
    }

    private void SetJumpSize(double size) {
        if(loopJumpLock) {
            SetLoopSize(size, false);
        } else {
            jumpSize = size;
        }
        UpdateSettings();
    }

    private void ToggleLoopJumpSync() {
        loopJumpLock = !loopJumpLock;
        if(loopJumpLock) jumpSize = loopSize;
        UpdateSettings();
    }

    private void UpdateSettings() {
        Settings.LoopJumpLock = loopJumpLock;
        Settings.LoopSize = loopSize;
        Settings.JumpSize = jumpSize;
        Program.Settings.Playback.EqProfile = EqControls.EqProfile.Name;
    }

    private void DoLoop(int handle, int channel, int data, IntPtr user) {
        if(loop.Enabled) {
            splitterStreams.ForEach(h => BassMix.BASS_Mixer_ChannelSetPosition(h, loop.StartBytes));

            if(loop.Reset) {
                loop.Reset = false;

                Bass.BASS_ChannelLock(masterSplitterHandle, true);
                Bass.BASS_ChannelRemoveSync(masterSplitterHandle, loop.BASSHandle);
                loop.BASSHandle = Bass.BASS_ChannelSetSync(masterSplitterHandle, BASSSync.BASS_SYNC_POS | BASSSync.BASS_SYNC_MIXTIME, loop.EndBytes, loopSyncProc, IntPtr.Zero);
                Bass.BASS_ChannelLock(masterSplitterHandle, false);
            }
        }
    }

    private void DoJump(int direction) {
        long p = BassMix.BASS_Mixer_ChannelGetPosition(masterSplitterHandle);
        long offset = p + direction * Bass.BASS_ChannelSeconds2Bytes(masterSplitterHandle, jumpSize / beatsPerSecond);
        if(offset > trackLengthBytes) return;
        if(offset < 0) offset = 0;

        // FIXME: This doesn't work correctly while playing; may have to ask Ian about it ;)
        splitterStreams.ForEach(h => BassMix.BASS_Mixer_ChannelSetPosition(h, offset, BASSMode.BASS_POS_MIXER_RESET | BASSMode.BASS_MIXER_CHAN_NORAMPIN));
    }

    // TODO: This is a very taxing operation, so it might be a good idea to allow the user to disable it
    // Disabling it would disable the playback sync and the beat monitor
    private async Task MonitorBeats() {
        double threshold = 0.01;
        int interval = 0;
        while(true) {
            await Task.Delay(1);

            if(Bass.BASS_ChannelIsActive(masterSplitterHandle) == BASSActive.BASS_ACTIVE_PLAYING) {
                playbackPosition = Bass.BASS_ChannelBytes2Seconds(masterSplitterHandle, BassMix.BASS_Mixer_ChannelGetPosition(masterSplitterHandle));

                InBeat = false;
                for(int i = 0; i < beatMarkers.Count; i++) {
                    if(Math.Abs(beatMarkers[i].Seconds - playbackPosition) < threshold) {
                        InBeatIndex = i % 2 + 1;
                        InBeat = true;
                        break;
                    }
                }

                if(++interval > 30) {
                    if(IsPlaying) {
                        float[] levelsReal = BassMix.BASS_Mixer_ChannelGetLevel(handle: masterSplitterHandle, flags: BASSLevel.BASS_LEVEL_MONO);
                        float[] levelsMonitor = BassMix.BASS_Mixer_ChannelGetLevel(handle: masterSplitterHandle, flags: BASSLevel.BASS_LEVEL_MONO | BASSLevel.BASS_LEVEL_VOLPAN);
                        vuMeter?.SetLevel(levelsReal[0], levelsMonitor[0], InBeatIndex);
                    } else {
                        vuMeter?.SetLevel(0, 0, InBeatIndex);
                    }

                    interval = 0;
                }
            }
        }
    }

    private async Task MonitorPlayback() {
        int intervals = 0;
        int delay = 60;
        while(true) {
            await Task.Delay(delay);

            if(Bass.BASS_ChannelIsActive(masterSplitterHandle) == BASSActive.BASS_ACTIVE_PLAYING) {
                if(waveform!.IsMouseDown) {
                    long p = waveform.PlaybackHead * waveformStepLength / WaveformBarWidth;
                    splitterStreams.ForEach(h => BassMix.BASS_Mixer_ChannelSetPosition(h, p));
                } else if(waveformFull!.IsMouseDown) {
                    long p = waveformFull.PlaybackHead * waveformStepLength / WaveformBarWidth;
                    splitterStreams.ForEach(h => BassMix.BASS_Mixer_ChannelSetPosition(h, p));
                } else {
                    waveform.PlaybackHead = BassMix.BASS_Mixer_ChannelGetPosition(masterSplitterHandle) * WaveformBarWidth / waveformStepLength;
                    waveformFull.PlaybackHead = waveform.PlaybackHead;
                }

                await waveform.Refresh();
                if(intervals % 5 == 0) await waveformFull!.Refresh();
            }

            if(++intervals % 12 == 0) await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender && faderVolume != null && (faderTempo != null || MinimalMode)) {
            faderVolume!.SetInitialValue(0.8);
            WaveformBarWidth = Program.Settings.Playback.WaveformZoom;
            if(!MinimalMode) {
                faderTempo.SetInitialValue(0.5);
                EqControls.EqProfile = Program.Settings.EqualizerProfiles.FirstOrDefault(p => p.Name == Program.Settings.Playback.EqProfile) ?? Program.Settings.EqualizerProfiles[0];

                loopJumpLock = Settings.LoopJumpLock;
                loopSize = Settings.LoopSize;
                jumpSize = Settings.JumpSize;
            }
            await InvokeAsync(StateHasChanged);
        }

        if(queueAutoSnap) {
            SnapToClosestBeatMarker();
            queueAutoSnap = false;
        }
    }
}