@using System.Diagnostics
@using Newtonsoft.Json
@using Un4seen.Bass

<div class="container scroller">
    <div class="device">
        <div class="outputs-names">
            <div><i class="fa-solid fa-volume-high"></i> Master</div>
            <div><i class="fa-solid fa-headphones-simple"></i> Monitor</div>
        </div>
    </div>
    @foreach(var (device, deviceIndex) in audioDevices.WithIndex()) {
        <div class="device">
            <h5>@device.Name</h5>
            <div class="channels">
                @foreach(var (channel, channelIndex) in device.Speakers.WithIndex()) {
                    <div class="channel">@channel</div>
                    <div class="outputs-select">
                        <input type="checkbox" @bind="master[deviceIndex][channelIndex]" @onmouseup="@(() => Update(true, deviceIndex, channelIndex))" id="@($"cb-master-{deviceIndex}{channelIndex}")" />
                        <input type="checkbox" @bind="monitor[deviceIndex][channelIndex]" @onmouseup="@(() => Update(false, deviceIndex, channelIndex))" id="@($"cb-monitor-{deviceIndex}{channelIndex}")" />
                    </div>
                }
            </div>
        </div>
    }
</div>
<div class="restart-warning" hidden="@(!hideRestartRequiredMsg)">&nbsp;</div>
<div class="restart-warning" hidden="@hideRestartRequiredMsg">Changes made to the AudioMatrix will require restarting the application</div>

@code {
    private List<AudioDevice> audioDevices { get; set; } = new();
    private bool[][] master = [];
    private bool[][] monitor = [];
    private bool hideRestartRequiredMsg = true;

    [Parameter]
    public Settings Settings { get; set; } = default!;

    private bool IsSelected(bool isMasterOutput, string deviceName, AudioDevice.DeviceSpeakers channel) {
        List<AudioDevice> devices = isMasterOutput ? Settings.Audio.MainOutputDevice : Settings.Audio.MonitorDevice;
        foreach(var d in devices) {
            if(d.Name == deviceName) return d.Speakers.Contains(channel);
        }
        return false;
    }

    // FIXME: This is ridiculous. We need to find a way to trigger the update when the checkbox state changes.
    // This works but it'd be easier if we could capture the @onchange event handler. INVESTIGATE!
    private void Update(bool isMasterOutput, int deviceIndex, int channelIndex) {
        Task.Run((Func<Task>)(async () => {
            await Task.Delay(25);

            bool state = isMasterOutput ? master[deviceIndex][channelIndex] : monitor[deviceIndex][channelIndex];
            List<AudioDevice> devices = isMasterOutput ? Settings.Audio.MainOutputDevice : Settings.Audio.MonitorDevice;

            if(state && devices.Count == 0) { // First device selected
                devices.Add(new AudioDevice(audioDevices[deviceIndex].Name, (AudioDevice.DeviceSpeakers)audioDevices[(int)deviceIndex].Speakers[channelIndex]));
            } else {
                foreach(var d in devices) {
                    if(d.Name == audioDevices[deviceIndex].Name) { // Device already exists; update channel state
                        if(state) {
                            if(!d.Speakers.Contains((AudioDevice.DeviceSpeakers)audioDevices[(int)deviceIndex].Speakers[channelIndex])) {
                                d.Speakers.Add((AudioDevice.DeviceSpeakers)audioDevices[(int)deviceIndex].Speakers[channelIndex]);
                            }
                        } else {
                            if(d.Speakers.Contains((AudioDevice.DeviceSpeakers)audioDevices[(int)deviceIndex].Speakers[channelIndex])) {
                                d.Speakers.Remove((AudioDevice.DeviceSpeakers)audioDevices[(int)deviceIndex].Speakers[channelIndex]);
                                if(d.Speakers.Count == 0) devices.Remove(d); // Remove device if no channels are selected
                            }
                        }
                        goto done;
                    }
                }

                // Device does not exist; add it
                devices.Add(new AudioDevice(audioDevices[deviceIndex].Name, (AudioDevice.DeviceSpeakers)audioDevices[(int)deviceIndex].Speakers[channelIndex]));
            }

        done:
            var original = JsonConvert.SerializeObject(Program.Settings.Audio);
            var updated = JsonConvert.SerializeObject(Settings.Audio);
            hideRestartRequiredMsg = original == updated;
            await InvokeAsync(StateHasChanged);
        }));
    }

    private void BuildAudioMatrix() {
        int devicesCount = Bass.BASS_GetDeviceCount() - 2;
        master = new bool[devicesCount][];
        monitor = new bool[devicesCount][];

        // Skip the first two devices: (0) No Sound, and (1) Default
        for(int i = 2; i < Bass.BASS_GetDeviceCount(); i++) {
            BASS_DEVICEINFO deviceInfo = Bass.BASS_GetDeviceInfo(i);
            AudioDevice device = new(deviceInfo.name);
            if(deviceInfo.IsEnabled) {
                Bass.BASS_Init(i, Program.SAMPLING_FREQUENCY, BASSInit.BASS_DEVICE_DEFAULT, IntPtr.Zero);
                Bass.BASS_SetDevice(i);
                BASS_INFO info = Bass.BASS_GetInfo();

                switch(info.speakers) {
                    case < 2:
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontStereo);
                        break;
                    case 2:
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontStereo);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontLeft);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontRight);
                        break;
                    case 4:
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontStereo);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontLeft);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontRight);

                        device.Speakers.Add(AudioDevice.DeviceSpeakers.SideStereo);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.SideLeft);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.SideRight);
                        break;
                    case 6:
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontStereo);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontLeft);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontRight);

                        device.Speakers.Add(AudioDevice.DeviceSpeakers.SideStereo);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.SideLeft);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.SideRight);

                        device.Speakers.Add(AudioDevice.DeviceSpeakers.CenterAndLFE);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.Center);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.LFE);
                        break;

                    case 8:
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontStereo);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontLeft);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.FrontRight);

                        device.Speakers.Add(AudioDevice.DeviceSpeakers.RearStereo);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.RearLeft);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.RearRight);

                        device.Speakers.Add(AudioDevice.DeviceSpeakers.SideStereo);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.SideLeft);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.SideRight);


                        device.Speakers.Add(AudioDevice.DeviceSpeakers.CenterAndLFE);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.Center);
                        device.Speakers.Add(AudioDevice.DeviceSpeakers.LFE);
                        break;
                }
            }
            audioDevices.Add(device);

            master[i - 2] = new bool[device.Speakers.Count];
            monitor[i - 2] = new bool[device.Speakers.Count];

            for(int j = 0; j < device.Speakers.Count; j++) {
                master[i - 2][j] = IsSelected(true, device.Name, device.Speakers[j]);
                monitor[i - 2][j] = IsSelected(false, device.Name, device.Speakers[j]);
            }
        }
    }

    protected override void OnAfterRender(bool firstRender) {
        if(firstRender) {
            BuildAudioMatrix();
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }
}