@using Diyokee.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<CacheDbContext> CacheDbContextFactory;
@inject IJSRuntime JS

<ModalDialog
    @ref="dialog"
    OnClose="Close"
    OnSave="Save">
    <div class="field">
        <label for="artist">Artist</label>
        <InputText id="artist" @bind-value="file.Artist" />
    </div>

    <div class="field">
        <label for="title">Title</label>
        <InputText id="title" @bind-value="file.Title" />
    </div>

    <div class="row">
        <div class="field">
            <label for="album">Album</label>
            <InputText
            id="album"
            @bind-value="file.Album"
            @onclick="@(async () => {
                    albumsAcVisible = true;
                    player.EnableMouseEvents = false;
                    await JS.InvokeVoidAsync("scrollToSelectedItem");
                })"
            @onblur=@(async () => {
                    await Task.Delay(100); // Process item onclick first (if any)
                    albumsAcVisible = false;
                    player.EnableMouseEvents = true;
                })
            />
            <div class="autocomplete scroller @(albumsAcVisible ? "show" : "")">
                @foreach(var album in albums) {
                    <div
                    class="item @(album == file.Album ? "selected" : "")"
                    @onclick="@(async () => {
                            file.Album = album;
                            albumsAcVisible = false;
                            player.EnableMouseEvents = true;
                        })">
                        @album
                    </div>
                }
            </div>
        </div>

        <div class="field">
            <label for="genre">Genre</label>
            <InputText
            id="genre"
            @bind-value="file.Genre"
            @onclick="@(async () => {
                    genresAcVisible = true;
                    player.EnableMouseEvents = false;
                    await JS.InvokeVoidAsync("scrollToSelectedItem");
                })"
            @onblur=@(async () => {
                    await Task.Delay(100); // Process item onclick first (if any)
                    genresAcVisible = false;
                    player.EnableMouseEvents = true;
                })
            />
            <div class="autocomplete scroller @(genresAcVisible ? "show" : "")">
                @foreach(var genre in genres) {
                    <div
                    class="item @(genre == file.Genre ? "selected" : "")"
                    @onclick="@(async () => {
                            file.Genre = genre;
                            genresAcVisible = false;
                            player.EnableMouseEvents = true;
                        })">
                        @genre
                    </div>
                }
            </div>
        </div>

        <div class="field year">
            <label for="year">Year</label>
            <InputNumber id="year" @bind-value="file.Year" />
        </div>
    </div>

    <div class="row">
        <div class="inner-properties-container">
            <div class="field downbeat-container">
                <label>Down beat</label>
                <div class="field downbeat">
                    <InputNumber id="downbeatH" @bind-value="DownbeatAtHours" @oninput="(e) => DownbeatAtHours = int.Parse(e.Value.ToString())" hidden="true" /><span hidden="true">:</span>
                    <InputNumber id="downbeatM" @bind-value="DownbeatAtMinutes" @oninput="(e) => DownbeatAtMinutes = int.Parse(e.Value.ToString())" /><span>:</span>
                    <InputNumber id="downbeatM" @bind-value="DownbeatAtSeconds" @oninput="(e) => DownbeatAtSeconds = int.Parse(e.Value.ToString())" /><span>:</span>
                    <InputNumber id="downbeatMs" @bind-value="DownbeatAtMiliSeconds" @oninput="(e) => DownbeatAtMiliSeconds = int.Parse(e.Value.ToString())" />
                </div>
                <div class="recalculate" @onclick="ReCalcDownbeat"><i class="fa-solid fa-arrow-rotate-right"></i></div>
            </div>

            <div class="field">
                <label for"bpm">BPM</label>
                <InputNumber id="bpm" class="as-number" @bind-value="Bpm" @oninput="(e) => Bpm = float.Parse(e.Value.ToString())" />
                <div class="recalculate" @onclick="ReCalcBpm"><i class="fa-solid fa-arrow-rotate-right"></i></div>
            </div>
        </div>

        <Player
        PlayerName="Preview"
        PlayerCssColor="#82871f"
        MinimalMode="true"
        @ref="player" />
    </div>
</ModalDialog>

<script>
    scrollToSelectedItem = () => document.querySelector(".item.selected").scrollTo({ top: 0 });
</script>

@code {
    private ModalDialog dialog = null!;
    private DFile file = new();
    private Player? player;

    private bool genresAcVisible = false;
    private bool albumsAcVisible = false;

    private List<string> genres = [];
    private List<string> albums = [];

    [Parameter]
    public FilesUI Files { get; set; } = null!;

    public bool IsOpen { get => dialog.IsOpen; }

    public void Open(DFile? file) {
        if(file == null) return;
        this.file = (DFile)file.Clone();

        Task.Run(async () => {
            CacheDbContext? cache = await CacheDbContextFactory.CreateDbContextAsync();
            genres = cache.Files.Select(f => f.Genre).Distinct().ToList();
            albums = cache.Files.Select(f => f.Album).Distinct().ToList();

            while(player == null) { // FIXME: Why? I'm sure there must be a better way to do this
                await Task.Delay(10);
            }

            player!.SetFile(this.file);
            dialog.Open();

            await InvokeAsync(StateHasChanged);
        });
    }

    private void Save() {
        Files.UpdateFile(file);
        Close();
    }

    public void Close() {
        player!.Stop(false);
        player!.EnableMouseEvents = true;
        genresAcVisible = false;
        albumsAcVisible = false;
    }

    int lastHrValue = -1;
    private int DownbeatAtHours {
        get => int.Parse(DFile.FormatTime(file.DownbeatAt, true).Split(':')[0]);
        set {
            if(lastHrValue == value) return;
            lastHrValue = value;
            file.DownbeatAt = DFile.ParseTime(value, DownbeatAtMinutes, DownbeatAtSeconds, DownbeatAtMiliSeconds);
            player!.SetParameters();
        }
    }

    int lastMinValue = -1;
    private int DownbeatAtMinutes {
        get => int.Parse(DFile.FormatTime(file.DownbeatAt, true).Split(':')[1]);
        set {
            if(lastMinValue == value) return;
            lastMinValue = value;
            file.DownbeatAt = DFile.ParseTime(DownbeatAtHours, value, DownbeatAtSeconds, DownbeatAtMiliSeconds);
            player!.SetParameters();
        }
    }

    int lastSecValue = -1;
    private int DownbeatAtSeconds {
        get => int.Parse(DFile.FormatTime(file.DownbeatAt, true).Split(':')[2].Split('.')[0]);
        set {
            if(lastSecValue == value) return;
            lastSecValue = value;
            file.DownbeatAt = DFile.ParseTime(DownbeatAtHours, DownbeatAtMinutes, value, DownbeatAtMiliSeconds);
            player!.SetParameters();
        }
    }

    int lastMsValue = -1;
    private int DownbeatAtMiliSeconds {
        get => int.Parse(DFile.FormatTime(file.DownbeatAt, true).Split(':')[2].Split('.')[1]);
        set {
            if(lastMsValue == value) return;
            lastMsValue = value;
            file.DownbeatAt = DFile.ParseTime(DownbeatAtHours, DownbeatAtMinutes, DownbeatAtSeconds, value);
            player!.SetParameters();
        }
    }

    private float Bpm {
        get => file.BPM;
        set {
            file.BPM = value;
            player!.SetParameters();
        }
    }

    private async void ReCalcBpm() {
        file.BPM = Files.CalcBpm(file);
        await InvokeAsync(StateHasChanged);
    }

    private async void ReCalcDownbeat() {
        file.DownbeatAt = Files.CalcDownbeat(file);
        await InvokeAsync(StateHasChanged);
    }
}