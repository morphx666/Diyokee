<div class="dialog-background @(isOpen ? "show" : "")">
    <div class="dialog-container @(isOpen ? "show" : "")">
        <div class="title">
            <span>Track Properties</span>
            <div class="close" @onclick="Close"><i class="fa-solid fa-close"></i></div>
        </div>

        <div class="properties-container">
            <div class="field">
                <label for="artist">Artist</label>
                <InputText id="artist" @bind-value="file.Artist" />
            </div>

            <div class="field">
                <label for="title">Title</label>
                <InputText id="title" @bind-value="file.Title" />
            </div>

            <div class="row">
                <div class="field">
                    <label for="album">Album</label>
                    <InputText id="album" @bind-value="file.Album" />
                </div>

                <div class="field year">
                    <label for="year">Year</label>
                    <InputNumber id="year" @bind-value="file.Year" />
                </div>

                <div class="field">
                    <label for="genre">Genre</label>
                    <InputText id="genre" @bind-value="file.Genre" />
                </div>
            </div>

            <div class="row">
                <div class="inner-properties-container">
                    <div class="field downbeat-container">
                        <label>Down beat</label>
                        <div class="field downbeat">
                            <InputNumber id="downbeatH" @bind-value="DownbeatAtHours" @oninput="(e) => DownbeatAtHours = int.Parse(e.Value.ToString())" hidden="true" /><span hidden="true">:</span>
                            <InputNumber id="downbeatM" @bind-value="DownbeatAtMinutes" @oninput="(e) => DownbeatAtMinutes = int.Parse(e.Value.ToString())" /><span>:</span>
                            <InputNumber id="downbeatM" @bind-value="DownbeatAtSeconds" @oninput="(e) => DownbeatAtSeconds = int.Parse(e.Value.ToString())" /><span>:</span>
                            <InputNumber id="downbeatMs" @bind-value="DownbeatAtMiliSeconds" @oninput="(e) => DownbeatAtMiliSeconds = int.Parse(e.Value.ToString())" />
                        </div>
                        <div class="recalculate" @onclick="ReCalcDownbeat"><i class="fa-solid fa-arrow-rotate-right"></i></div>
                    </div>

                    <div class="field">
                        <label for"bpm">BPM</label>
                        <InputNumber id="bpm" class="as-number" @bind-value="Bpm" @oninput="(e) => Bpm = float.Parse(e.Value.ToString())" />
                        <div class="recalculate" @onclick="ReCalcBpm"><i class="fa-solid fa-arrow-rotate-right"></i></div>
                    </div>
                </div>

                <Player
                PlayerName="Preview"
                PlayerCssColor="#82871f"
                MinimalMode="true"
                @ref="player" />
            </div>
        </div>

        <div class="buttons-container">
            <div class="dlg-button primary" @onclick="() => { Files.UpdateFile(file); Close(); }">Save</div>
            <div class="dlg-button secondary" @onclick="Close">Cancel</div>
        </div>
    </div>
</div>

@code {
    private DFile file = new();
    private Player? player;
    private bool isOpen = false;

    [Parameter]
    public FilesUI Files { get; set; } = null!;

    public void Open(DFile? file) {
        if(file == null) return;
        this.file = (DFile)file.Clone();

        Task.Run(async () => { // FIXME: Why? I'm sure there must be a better way to do this
            while(player == null) {
                await Task.Delay(10);
            }

            player!.SetFile(this.file);
            isOpen = true;

            await InvokeAsync(StateHasChanged);
        });
    }

    public void Close() {
        player!.Stop(false);
        isOpen = false;
    }

    private int DownbeatAtHours {
        get => int.Parse(DFile.FormatTime(file.DownbeatAt, true).Split(':')[0]);
        set {
            file.DownbeatAt = DFile.ParseTime(value, DownbeatAtMinutes, DownbeatAtSeconds, DownbeatAtMiliSeconds);
            player!.SetParameters();
        }
    }

    private int DownbeatAtMinutes {
        get => int.Parse(DFile.FormatTime(file.DownbeatAt, true).Split(':')[1]);
        set {
            file.DownbeatAt = DFile.ParseTime(DownbeatAtHours, value, DownbeatAtSeconds, DownbeatAtMiliSeconds);
            player!.SetParameters();
        }
    }

    private int DownbeatAtSeconds {
        get => int.Parse(DFile.FormatTime(file.DownbeatAt, true).Split(':')[2].Split('.')[0]);
        set {
            file.DownbeatAt = DFile.ParseTime(DownbeatAtHours, DownbeatAtMinutes, value, DownbeatAtMiliSeconds);
            player!.SetParameters();
        }
    }

    private int DownbeatAtMiliSeconds {
        get => int.Parse(DFile.FormatTime(file.DownbeatAt, true).Split(':')[2].Split('.')[1]);
        set {
            file.DownbeatAt = DFile.ParseTime(DownbeatAtHours, DownbeatAtMinutes, DownbeatAtSeconds, value);
            player!.SetParameters();
        }
    }

    private float Bpm {
        get => file.BPM;
        set {
            file.BPM = value;
            player!.SetParameters();
        }
    }

    private async void ReCalcBpm() {
        file.BPM = Files.CalcBpm(file);
        await InvokeAsync(StateHasChanged);
    }

    private async void ReCalcDownbeat() {
        file.DownbeatAt = Files.CalcDownbeat(file);
        await InvokeAsync(StateHasChanged);
    }
}
