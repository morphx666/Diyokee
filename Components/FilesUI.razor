@using System.Diagnostics
@using System.Text
@using Diyokee.Data
@using Diyokee.MediaProviders
@using Microsoft.EntityFrameworkCore
@using TagLib
@using Un4seen.Bass
@using Un4seen.Bass.AddOn.Fx
@inject IDbContextFactory<CacheDbContext> CacheDbContextFactory;
@inject IJSRuntime JS

<div class="files-container">
    <div class="spinner" style="@(providerIsBusy ? "" : "display: none")">
        <img src="@Assets["/images/spinner.png"]" />
    </div>
    <div class="files-scrollable scroller">
        <div class="files-list-container" tabindex="0">
            <div class="column cell" @onclick="() => SetSortingIndex(0)">Artist<span class="@(sortAscending ? "asc" : "desc")">@(sortIndex == 0 ? "🞁" : "")</span></div>
            <div class="column cell" @onclick="() => SetSortingIndex(1)">Title<span class="@(sortAscending ? "asc" : "desc")">@(sortIndex == 1 ? "🞁" : "")</span></div>
            <div class="column cell" @onclick="() => SetSortingIndex(2)">Genre<span class="@(sortAscending ? "asc" : "desc")">@(sortIndex == 2 ? "🞁" : "")</span></div>
            <div class="column cell" @onclick="() => SetSortingIndex(3)">Album<span class="@(sortAscending ? "asc" : "desc")">@(sortIndex == 3 ? "🞁" : "")</span></div>
            <div class="column cell" @onclick="() => SetSortingIndex(4)">BPM<span class="@(sortAscending ? "asc" : "desc")">@(sortIndex == 4 ? "🞁" : "")</span></div>
            <div class="column cell" @onclick="() => SetSortingIndex(5)">Key<span class="@(sortAscending ? "asc" : "desc")">@(sortIndex == 5 ? "🞁" : "")</span></div>
            <div class="column cell" @onclick="() => SetSortingIndex(6)">Gain<span class="@(sortAscending ? "asc" : "desc")">@(sortIndex == 6 ? "🞁" : "")</span></div>
            <div class="column cell" @onclick="() => SetSortingIndex(7)">Duration<span class="@(sortAscending ? "asc" : "desc")">@(sortIndex == 7 ? "🞁" : "")</span></div>

            @foreach(DFile file in files) {
                @if(file.Artist == "...") {
                    <div class="cell @((file.Filename == selectedFile) ? "selected" : "")" @onclick="() => ChangeSelectedFile(file)">
                        <img src="@Assets["/images/waiting.gif"]" />
                    </div>
                } else {
                    <div class="cell ellipsis @((file.Filename == selectedFile) ? "selected" : "")" @onclick="() => ChangeSelectedFile(file)">@file.Artist</div>
                }
                <div class="cell ellipsis @((file.Filename == selectedFile) ? "selected" : "")" @onclick="() => ChangeSelectedFile(file)">@file.Title</div>
                <div class="cell ellipsis @((file.Filename == selectedFile) ? "selected" : "")" @onclick="() => ChangeSelectedFile(file)">@file.Genre</div>
                <div class="cell ellipsis @((file.Filename == selectedFile) ? "selected" : "")" @onclick="() => ChangeSelectedFile(file)">@file.Album</div>
                <div class="cell ellipsis right mono @((file.Filename == selectedFile) ? "selected" : "")" @onclick="() => ChangeSelectedFile(file)">@file.BPM.ToString("N2")</div>
                <div class="cell ellipsis right mono @((file.Filename == selectedFile) ? "selected" : "")" @onclick="() => ChangeSelectedFile(file)">@keyTools.ConvertTo(file.Key, KeyTools.Notations.CamelotKey)</div>
                <div class="cell ellipsis right mono @((file.Filename == selectedFile) ? "selected" : "")" @onclick="() => ChangeSelectedFile(file)">@(file.HasReplayGain ? @file.ReplayGain.ToString("N2") : "")</div>
                <div class="cell ellipsis right mono @((file.Filename == selectedFile) ? "selected" : "")" @onclick="() => ChangeSelectedFile(file)">@DFile.FormatTime(file.Duration)</div>
            }
        </div>
    </div>

    <div class="footer-container">
        <InputText class="text-input" @bind-Value="@searchText" @onkeyup="@TextInputHandleKeyUp"></InputText>
        <div class="button reset-search" @onclick="@ResetSearch">×</div>
        <div class="button search-button @(isSearching ? "working" : "")" @onclick="@(() => AnalyzeFiles(true))"><span>@searchButtonIcon</span></div>
        <div class="button" @onclick="@ReAnalyzeFile">⟳</div>

        <div class="progress" style="@GetProgressCss()"></div>
    </div>
</div>

<script>
    scrollFilesViewTop = () => document.querySelector(".files-scrollable").scrollTo({ top: 0 });
</script>

@code {
    private List<DFile> files = [];
    private string lastRelativePath = "-";
    private string selectedFile = "";
    private Task? analyzingTask = null;
    private KeyTools keyTools = new();
    private string searchText = "";
    private CancellationTokenSource? cancellationTokenSource = null;
    private bool isSearching = false;
    private bool providerIsBusy = false;
    private string searchButtonIcon = "🔎";
    private bool componentCanRender = false;
    private int analyzedFilesCount = 0;

    private int sortIndex = 0;
    private bool sortAscending = true;    

    public const double TimeSlice = 0.05;

    [Parameter]
    public IMediaProvider? Provider { get; set; } = null;

    [Parameter]
    public EventCallback<DFile> SelectedFileChanged { get; set; }

    [Parameter]
    public string RelativePath { get; set; } = "";

    public async void SetRelativePath(string path) {
        if(lastRelativePath == path) return;
        lastRelativePath = path;

        RelativePath = path;
        selectedFile = "";

        await AnalyzeFiles(false);
    }

    private string GetProgressCss() {
        if(files.Count > 0) {
            return $"width: {analyzedFilesCount * 100.0 / files.Count}%";
        } else {
            return "width: 0";
        }
    }

    private async Task AnalyzeFiles(bool doSearch) {
        if(doSearch && searchText == "") doSearch = false;
        await InvokeAsync(() => {
            providerIsBusy = true;
            StateHasChanged();
        });

        if(cancellationTokenSource == null) {
            cancellationTokenSource = new CancellationTokenSource();
        } else {
            cancellationTokenSource.Cancel();
            analyzingTask?.Wait();
            cancellationTokenSource.Dispose();
            cancellationTokenSource = new CancellationTokenSource();
        }

        files.Clear();
        if(doSearch) {
            isSearching = true;
            searchButtonIcon = "↻";
            Provider?.Search(RelativePath, searchText, true).ForEach(file => {
                string fullFileName = Path.Combine(Provider.RootPath, RelativePath, file);
                files.Add(new DFile {
                        Artist = "...",
                        Filename = fullFileName
                    });
            });
        } else {
            Provider?.Files(RelativePath).ForEach(file => {
                string fullFileName = Path.Combine(Provider.RootPath, RelativePath, file);
                files.Add(new DFile {
                        Artist = "...",
                        Filename = fullFileName
                    });
            });
        }
        if(componentCanRender) await JS.InvokeVoidAsync("scrollFilesViewTop");
        await InvokeAsync(() => {
            providerIsBusy = false;
            StateHasChanged();
        });

        analyzedFilesCount = 0;
        CacheDbContext? cache = null;
        analyzingTask = await Task.Run(async () => {
            cache ??= await CacheDbContextFactory.CreateDbContextAsync();

            files.ForEach(async file => {
                if(cancellationTokenSource.IsCancellationRequested) return;

                await AnalyzeFile(file, cache, false);

                if(++analyzedFilesCount % 10 == 0) await cache!.SaveChangesAsync();
                await InvokeAsync(StateHasChanged);
            });
        }, cancellationTokenSource.Token).ContinueWith(async _ => {
            isSearching = false;
            searchButtonIcon = "🔎";
            analyzedFilesCount = 0;

            SortFilesList();

            await InvokeAsync(StateHasChanged);
            await cache!.SaveChangesAsync();
            await cache.DisposeAsync();
        });
    }

    private void SetSortingIndex(int index) {
        if(sortIndex == index) {
            sortAscending = !sortAscending;
        } else {
            sortIndex = index;
            sortAscending = true;
        }
        SortFilesList();
    }

    private void SortFilesList() {
        if(sortAscending) {
            if(sortIndex == 0) files = files.OrderBy(f => f.Artist).ToList();
            if(sortIndex == 1) files = files.OrderBy(f => f.Title).ToList();
            if(sortIndex == 2) files = files.OrderBy(f => f.Genre).ToList();
            if(sortIndex == 3) files = files.OrderBy(f => f.Album).ToList();
            if(sortIndex == 4) files = files.OrderBy(f => f.BPM).ToList();
            if(sortIndex == 5) files = files.OrderBy(f => f.Key).ToList();
            if(sortIndex == 6) files = files.OrderBy(f => f.ReplayGain).ToList();
            if(sortIndex == 7) files = files.OrderBy(f => f.Duration).ToList();
        } else {
            if(sortIndex == 0) files = files.OrderByDescending(f => f.Artist).ToList();
            if(sortIndex == 1) files = files.OrderByDescending(f => f.Title).ToList();
            if(sortIndex == 2) files = files.OrderByDescending(f => f.Genre).ToList();
            if(sortIndex == 3) files = files.OrderByDescending(f => f.Album).ToList();
            if(sortIndex == 4) files = files.OrderByDescending(f => f.BPM).ToList();
            if(sortIndex == 5) files = files.OrderByDescending(f => f.Key).ToList();
            if(sortIndex == 6) files = files.OrderByDescending(f => f.ReplayGain).ToList();
            if(sortIndex == 7) files = files.OrderByDescending(f => f.Duration).ToList();
        }
    }

    private async Task AnalyzeFile(DFile file, CacheDbContext cache, bool ignoreCache) {
        var cachedFile = ignoreCache ? null : await cache.Files.FirstOrDefaultAsync(f => f.Filename == file.Filename);
        if(cachedFile == null) {
            float bpm = 0;
            double downbeatAt = -1;

            using(TagLib.File tlFile = TagLib.File.Create(file.Filename)) {
                file.Artist = tlFile.Tag.FirstPerformer ?? "";
                file.Title = tlFile.Tag.Title ?? "";
                file.Genre = tlFile.Tag.FirstGenre ?? "";
                file.Album = tlFile.Tag.Album ?? "";
                if(!ignoreCache) bpm = tlFile.Tag.BeatsPerMinute;
                file.Key = tlFile.Tag.InitialKey ?? "";
                file.ReplayGain = double.IsNaN(tlFile.Tag.ReplayGainTrackGain) ? 0 : tlFile.Tag.ReplayGainTrackGain;
                file.HasReplayGain = !double.IsNaN(tlFile.Tag.ReplayGainTrackGain);
            }

            if((file.Artist == "" || file.Title == "") && file.Filename.Contains(" - ")) {
                string name = file.Filename;
                if(name.Contains('\\')) name = name.Split('\\').Last();
                string[] tokens = name.Split(" - ");
                if(file.Artist == "") file.Artist = tokens[0];
                if(file.Title == "") file.Title = tokens[1];
            }
            // This is for files where the only title is present and it has been set to the file name
            if(file.Title.StartsWith(file.Artist)) file.Title = file.Title.Replace($"{file.Artist} - ", "").Trim();

            int handle = Bass.BASS_StreamCreateFile(file.Filename, 0, 0, BASSFlag.BASS_STREAM_DECODE | BASSFlag.BASS_SAMPLE_MONO | BASSFlag.BASS_STREAM_PRESCAN);
            file.Duration = Bass.BASS_ChannelBytes2Seconds(handle, Bass.BASS_ChannelGetLength(handle, BASSMode.BASS_POS_BYTE));
            if(bpm <= 0) bpm = BassFx.BASS_FX_BPM_DecodeGet(handle, 0, file.Duration / 2, Utils.MakeLong(60, 330), BASSFXBpm.BASS_FX_BPM_MULT2, null, IntPtr.Zero);
            if(bpm > 0) file.BPM = bpm;

            // TODO: Implement key finding algorithm, such as Krumhansl-Schmuckler

            BassFx.BASS_FX_BPM_BeatDecodeGet(handle, 0, 60, BASSFXBpm.BASS_FX_BPM_DEFAULT,
                new BPMBEATPROC((int handle, double beatPosition, IntPtr user) => {
                    if(downbeatAt == -1) downbeatAt = beatPosition;
                }),
                IntPtr.Zero);

            file.DownbeatAt = downbeatAt;
            file.Waveform = GenerateWaveform(handle).Zip();

            BassFx.BASS_FX_BPM_Free(handle);
            Bass.BASS_StreamFree(handle);

            cache.Files.Add(file);
        } else {
            file.Artist = cachedFile.Artist;
            file.Title = cachedFile.Title;
            file.Genre = cachedFile.Genre;
            file.Album = cachedFile.Album;
            file.Duration = cachedFile.Duration;
            file.Waveform = cachedFile.Waveform;
            file.BPM = cachedFile.BPM;
            file.DownbeatAt = cachedFile.DownbeatAt;
            file.Key = cachedFile.Key;
            file.ReplayGain = cachedFile.ReplayGain;
            file.HasReplayGain = cachedFile.HasReplayGain;
        }
    }

    private string GenerateWaveform(int handle) {
        Bass.BASS_ChannelSetPosition(handle, 0, BASSMode.BASS_POS_BYTE);
        long bufferLen = Bass.BASS_ChannelSeconds2Bytes(handle, TimeSlice);
        long stepLen = Bass.BASS_ChannelSeconds2Bytes(handle, TimeSlice);
        Int16[] buffer = new Int16[bufferLen];

        StringBuilder sb = new();
        int maxValue = Int16.MaxValue / 2;

        while(true) {
            if(Bass.BASS_ChannelGetData(handle, buffer, buffer.Length) <= 0) break;
            double avg = buffer.Average(b => b < 0 ? -b : b) / maxValue;
            sb.Append(avg.ToString());
            sb.Append('|');

            bool r = Bass.BASS_ChannelSetPosition(handle, stepLen, BASSMode.BASS_POS_BYTE | BASSMode.BASS_POS_DECODETO | BASSMode.BASS_POS_RELATIVE);
            stepLen += stepLen;
        }

        return sb.ToString().TrimEnd('|');
    }

    private async void ChangeSelectedFile(DFile? file) {
        string newFilename = file?.Filename ?? "";
        if(selectedFile == newFilename) return;

        selectedFile = newFilename;
        await SelectedFileChanged.InvokeAsync(file);
    }

    private async void TextInputHandleKeyUp(KeyboardEventArgs e) {
        if(e.Key == "Enter") await AnalyzeFiles(true);
    }

    private async void ResetSearch() {
        if(searchText != "") {
            searchText = "";
            await AnalyzeFiles(false);
        }
    }

    private async void ReAnalyzeFile() {
        CacheDbContext? cache = await CacheDbContextFactory.CreateDbContextAsync();
        DFile? selFile = await cache.Files.FirstOrDefaultAsync(f => f.Filename == selectedFile);
        if(selFile != null) {
            cache.Files.Remove(selFile);
            await cache!.SaveChangesAsync();

            int index = files.FindIndex(f => f.Filename == selectedFile);
            files.RemoveAt(index);

            await AnalyzeFile(selFile, cache, true);

            files.Insert(index, selFile);
            await cache!.SaveChangesAsync();
            await InvokeAsync(StateHasChanged);
        }
        await cache.DisposeAsync();
    }

    protected override Task OnAfterRenderAsync(bool firstRender) {
        if(firstRender) componentCanRender = true;
        return base.OnAfterRenderAsync(firstRender);
    }

    // Is this the correct way to handle parameter changes?
    // https://stackoverflow.com/questions/79302784/why-blazor-component-parameters-should-be-the-auto-properties
    public override Task SetParametersAsync(ParameterView parameters) {
        parameters.SetParameterProperties(this);

        SetRelativePath(RelativePath);

        return base.OnParametersSetAsync();
    }
}