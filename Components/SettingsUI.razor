@using Un4seen.Bass

<ModalDialog Title="Settings"
             OnSave="Save"
             OnClose="Close"
             @ref="dialog">

    @if(settings == null) return;

    <div class="header">
        <h3>Audio</h3>
        <AudioMatrix Settings="settings" />
    </div>

    <div class="header">
        <h3>Local Media</h3>

        <div class="field">
            <label for="local-media-name">Name</label>
            <InputText id="local-media-name" @bind-value="settings.MediaProviders[0].Name" />
        </div>

        <div class="field">
            <label for="local-media-location">Location</label>
            <InputText id="local-media-location" @bind-value="settings.MediaProviders[0].RootDirectory" />
        </div>
    </div>

    <div class="header">
        <h3>Playback</h3>

        <div class="field">
            <label for="lock-onplay">Lock players while playing</label>
            <InputCheckbox id="lock-onplay" @bind-value="settings.Playback.LockOnPlay" />
        </div>

        <div class="field">
            <label for="sync-playback">Start playback in-sync with other player </label>
            <InputCheckbox id="sync-playback" @bind-value="settings.Playback.SyncPlayback" />
            <span class="info">(hold SHIFT to override)</span>
        </div>

        <div class="field">
            <label for="tempo-range">Tempo Range -/+</label>
            <InputSelect id="tempo-range" @bind-value="settings.Playback.TempoRange">
                @foreach(var tempoRange in TempoRanges) {
                    <option value="@tempoRange">@tempoRange</option>
                }
            </InputSelect>
        </div>

        @*
            FIXME: This could be removed. It's already available as a dropdown menu for each player.
            Or perhaps we should remove the dropdown menus from the main UI?
        *@
        <div class="field">
            <label for="eq-profile">Equalizer Profile</label>
            <InputSelect id="eq-profile" @bind-value="settings.Playback.EqProfile">
                @foreach(var profile in settings.EqualizerProfiles) {
                    <option value="@profile.Name">@profile.Name</option>
                }
            </InputSelect>
        </div>

        @foreach((Settings.PlayerSettings player, int index) withIndex in settings.Playback.Players.WithIndex()) {
            <div class="sub-header">
                <h5>Player @(withIndex.index + 1)</h5>

                <div class="field">
                    <label for="@($"player{withIndex.index}-name")">Name</label>
                    <InputText id="@($"player{withIndex.index}-name")" @bind-value="withIndex.player.Name" />
                </div>
                <div class="field">
                    <label for="@($"player{withIndex.index}-color")">Color</label>
                    <InputText class="as-number"
                               id="@($"player{withIndex.index}-color")"
                               @bind-value="withIndex.player.Color" />
                    <div class="color" style="background-color: @(withIndex.player.Color)"></div>
                </div>
                <div class="field">
                    <label for="@($"player{withIndex.index}-reverse-controls")">Reverse Controls Order</label>
                    <InputCheckbox id="@($"player{withIndex.index}-reverse-controls")" @bind-value="withIndex.player.ReverseControls" />
                </div>
            </div>
        }
    </div>
</ModalDialog>

@code {
    private ModalDialog dialog = null!;

    [Parameter]
    public EventCallback OnSave { get; set; } = default!;

    [Parameter]
    public EventCallback OnClose { get; set; } = default!;

    private Settings settings = default!;

    private static readonly int[] TempoRanges = new int[] { 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 25, 35, 50, 100 };

    public void Open() {
        settings = (Settings)Program.Settings.Clone();
        dialog.Open();
    }

    public void Close() {
        dialog.Close();

        OnClose.InvokeAsync(null);
    }

    public async void Save() {
        Program.Settings = settings;
        await Program.Settings.Save();
        Close();

        await OnSave.InvokeAsync(null);
    }
}