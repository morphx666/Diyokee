@using Un4seen.Bass

<ModalDialog
Title="Settings"
OnSave="Save"
OnClose="Close"
@ref="dialog">
    @if(settings == null) return;
    <div class="header">
        <h4>Audio</h4>

        @if(useAudioMatrix) {
            <AudioMatrix />
        } else {
            <div class="field">
                <label for="main-output">Main Output</label>
                <InputSelect id="main-output" @bind-value="mainOutputDevice">
                    @foreach(var device in outputDevices) {
                        <option value="@device.Name">@device.Name</option>
                    }
                </InputSelect>
            </div>
            <span class="note" hidden="@(settings.Audio.MainOutputDevice == mainOutputDevice)">This setting will take effect after restarting the application</span>
        }
    </div>

    <div class="header">
        <h4>Playback</h4>

        <div class="field">
            <label for="lock-onplay">Lock players while playing</label>
            <InputCheckbox id="lock-onplay" @bind-value="settings.Playback.LockOnPlay" />
        </div>

        <div class="field">
            <label for="sync-playback">Start playback in-sync with other player</label>
            <InputCheckbox id="sync-playback" @bind-value="settings.Playback.SyncPlayback" />
        </div>

        @*
            FIXME: This could be removed. It's already available as a dropdown menu for each player.
            Or perhaps we should remove the dropdown menus from the main UI
        *@
        <div class="field">
            <label for="eq-profile">Equalizer Profile</label>
            <InputSelect id="eq-profile" @bind-value="settings.Playback.EqProfile">
                @foreach(var profile in settings.EqualizerProfiles) {
                    <option value="@profile.Name">@profile.Name</option>
                }
            </InputSelect>
        </div>

        @foreach((Settings.PlayerSettings player, int index) withIndex in settings.Playback.Players.WithIndex()) {
            <div class="sub-header">
                <h5>Player @(withIndex.index + 1)</h5>

                <div class="field">
                    <label for="@($"player{withIndex.index}-name")">Name</label>
                    <InputText id="@($"player{withIndex.index}-name")" @bind-value="withIndex.player.Name" />
                </div>
                <div class="field">
                    <label for="@($"player{withIndex.index}-color")">Color</label>
                    <InputText id="@($"player{withIndex.index}-color")" @bind-value="withIndex.player.Color" />
                </div>
                <div class="field">
                    <label for="@($"player{withIndex.index}-reverse-controls")">Reverse Controls Order</label>
                    <InputCheckbox id="@($"player{withIndex.index}-reverse-controls")" @bind-value="withIndex.player.ReverseControls" />
                </div>
            </div>
        }
    </div>
</ModalDialog>

@code {
    private struct Device {
        public string Name;
        public string Driver;

        public Device(string name, string driver) {
            Name = name;
            Driver = driver;
        }

        override public string ToString() {
            return Name;
        }
    }
    private ModalDialog dialog = null!;

    private string mainOutputDevice = "";
    private bool mainOutputDeviceAcVisible = false;
    private List<Device> outputDevices = new();
    private bool useAudioMatrix = false;

    [Parameter]
    public EventCallback OnSave { get; set; } = default!;

    [Parameter]
    public EventCallback OnClose { get; set; } = default!;

    private Settings settings = default!;

    public void Open() {
        settings = (Settings)Program.Settings.Clone();
        outputDevices.Clear();

        for(int i = 0; i < Bass.BASS_GetDeviceCount(); i++) {
            BASS_DEVICEINFO deviceInfo = Bass.BASS_GetDeviceInfo(i);
            outputDevices.Add(new(deviceInfo.name, deviceInfo.driver));

            if(deviceInfo.name == settings.Audio.MainOutputDevice) {
                mainOutputDevice = deviceInfo.name;
            }
        }

        dialog.Open();
    }

    public void Close() {
        dialog.Close();

        OnClose.InvokeAsync(null);
    }

    public async void Save() {
        settings.Audio.MainOutputDevice = mainOutputDevice;

        Program.Settings = settings;
        Close();

        await OnSave.InvokeAsync(null);
    }
}